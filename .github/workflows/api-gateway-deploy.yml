name: CI/CD Deploy to Kubernetes (api-gateway)

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'The service to deploy'
        required: true
        default: 'api-gateway'
  push:
    branches:
      - dev
      - qas
      - prod
  pull_request:
    branches:
      - dev
      - qas
      - prod

env:
  APP_SERVICE: api-gateway
  IMAGE_TAG: '1.0.0'  # Example static tag or use ${{ github.sha }}
  REGISTRY: ${{ secrets.REGISTRY }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'prod' || (github.ref == 'refs/heads/qas' && 'qas' || 'dev') }}
  KUBE_API_SERVER: 'kubernetes.docker.internal'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: 'v0.11.2'

      - name: Change directory to ${{ env.APP_SERVICE }}
        run: cd ${{ env.APP_SERVICE }} || exit 1 # Ensure directory exists

      - name: Make gradlew executable
        run: chmod +x ${{ env.APP_SERVICE }}/gradlew

      - name: Determine changed services
        id: changed-services
        run: |
          PREVIOUS_SHA=$(git rev-parse HEAD^ || echo "No previous commit")
          changes=$(git diff --name-only $PREVIOUS_SHA HEAD || true)
          echo "Changed files:"
          echo "$changes"
          CHANGED_SERVICES=""
          if echo "$changes" | grep -q '^${{ env.APP_SERVICE }}/'; then
            CHANGED_SERVICES="${{ env.APP_SERVICE }}"
          fi
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV

      - name: Debug CHANGED_FILES
        run: |
          echo "Changed services: $CHANGED_SERVICES"

      - name: Login to Docker Hub
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login ${{ env.DOCKER_REGISTRY }} -u "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker images
        if: env.CHANGED_SERVICES == env.APP_SERVICE
        run: |
          echo "Building gradle ${{ env.APP_SERVICE }}"
          cd ${{ env.APP_SERVICE }} || exit 1 # Ensure directory exists
          # Run Gradle build
          ./gradlew build || exit 1

          # Verify if JAR exists
          ls -l build/libs/
          
          echo "Building and pushing docker ${{ env.APP_SERVICE }}"
          echo REGISTRY: ${{ env.REGISTRY }}, ENVIRONMENT: ${{ env.ENVIRONMENT }}, IMAGE_TAG: ${{ env.IMAGE_TAG }}
          
          # Build Docker image
          # docker build -t ${{ env.REGISTRY }}/${{ env.APP_SERVICE }}-${{ env.ENVIRONMENT }}:${{ env.IMAGE_TAG }} -f Dockerfile .
          
          # Push Docker image
          # docker push ${{ env.REGISTRY }}/${{ env.APP_SERVICE }}-${{ env.ENVIRONMENT }}:${{ env.IMAGE_TAG }}
          
          # List Docker images
          docker images

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.12.1'

      - name: Change directory to ${{ env.APP_SERVICE }}
        run: cd ${{ env.APP_SERVICE }} || exit 1 # Ensure directory exists

      - name: Make executable
        run: chmod +x ${{ env.APP_SERVICE }}

      - name: Debug CHANGED_FILES
        run: |
          echo "Changed services: $CHANGED_SERVICES"

#      - name: Update /etc/hosts
#        run: |
#          echo "127.0.0.1    kubernetes.docker.internal" | sudo tee -a /etc/hosts

#      - name: Print /etc/hosts
#        run: cat /etc/hosts

      - name: Install KinD
        run: |
          if ! command -v kind &> /dev/null; then
            echo "KinD not found. Installing..."
            curl -s https://api.github.com/repos/kubernetes-sigs/kind/releases/latest \
            | grep "browser_download_url.*kind-linux-amd64" \
            | cut -d : -f 2,3 \
            | tr -d \" \
            | xargs curl -Lo ./kind && chmod +x ./kind && mv ./kind /usr/local/bin/
          else
            echo "KinD is already installed."
          fi

      - name: Create KinD Cluster
        run: |
          echo "Checking for existing KinD clusters..."
          kind get clusters || echo "Kind command failed or no clusters found."
          
          if kind get clusters | grep -q "${{ env.APP_SERVICE }}-cluster"; then
            echo "KinD cluster '${{ env.APP_SERVICE }}-cluster' already exists."
          else
            echo "Creating KinD cluster '${{ env.APP_SERVICE }}-cluster'..."
            kind create cluster --name ${{ env.APP_SERVICE }}-cluster
          fi

      - name: Set up Kubeconfig for KinD
        run: |
          mkdir -p $HOME/.kube
          echo "Exporting KinD Kubeconfig"
          kind get kubeconfig --name api-gateway-cluster > $HOME/.kube/config
          kubectl config use-context kind-${{ env.APP_SERVICE }}-cluster
          cat $HOME/.kube/config # Debug: Verify the kubeconfig content

#      - name: Check Kubernetes API Server Connectivity
#        run: |
#          echo "Pinging Kubernetes API Server: ${{ env.KUBE_API_SERVER }}"
#          ping -c 4 ${{ env.KUBE_API_SERVER }} || echo "Ping failed"

#      - name: Create Kubeconfig
#        run: |
#          mkdir -p $HOME/.kube
#          echo "${{ env.KUBE_CONFIG }}" > $HOME/.kube/config
#          kubectl config use-context docker-desktop

#      - name: List Kubernetes nodes
#        run: kubectl get nodes -v=10

      - name: Test Kubernetes Connectivity
        run: |
          kubectl cluster-info || echo "Kubernetes connectivity test failed"

      - name: Deploy to Kubernetes
        if: env.CHANGED_SERVICES == env.APP_SERVICE
        run: |
          echo "Deploying ${{ env.APP_SERVICE }} to environment: ${{ env.ENVIRONMENT }}, namespace: ${{ env.KUBE_NAMESPACE }}"
          
          cd ${{ env.APP_SERVICE }}/k8s || exit 1 # Ensure directory exists        
          
          # Verify if the values file exists
          VALUES_FILE="./values-${{ env.ENVIRONMENT }}.yaml"
          if [ -f "$VALUES_FILE" ]; then
            echo "Applying Helm chart, namespace: ${{ env.KUBE_NAMESPACE }}"

            echo "---> Helm List all Namespaces"
            helm list --all-namespaces

            echo "---> Helm List in Namespaces: ${{ env.KUBE_NAMESPACE }}"
            helm list --namespace ${{ env.KUBE_NAMESPACE }}

            echo "---> Kubectl get Services"
            kubectl get services -n ${{ env.KUBE_NAMESPACE }}

            echo "---> Kubectl Upgrade"
            helm upgrade --install ${{ env.APP_SERVICE }} . \
            --namespace ${{ env.KUBE_NAMESPACE }} \
            --values values.yaml \
            --values "$VALUES_FILE" \
            # --set image.tag=${{ env.IMAGE_TAG }}
          else
            echo "Values file not found: $VALUES_FILE"
            exit 1
          fi

      - name: Check deployment status
        if: env.CHANGED_SERVICES == env.APP_SERVICE
        run: |
          kubectl rollout status deployment/${{ env.APP_SERVICE }} --namespace=${{ env.KUBE_NAMESPACE }} || true
